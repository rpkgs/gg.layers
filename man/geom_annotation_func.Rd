% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_annotation_func.R
\name{geom_annotation_func}
\alias{geom_annotation_func}
\title{geom_annotation}
\usage{
geom_annotation_func(
  mapping = NULL,
  data = NULL,
  plot.fun = NULL,
  ...,
  x = 0,
  y = 0,
  width = unit(0.5, "npc"),
  height = unit(0.5, "npc"),
  just = c(0, 0)
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{A tibble with the column of \code{grob}}

\item{plot.fun}{function to plot, \code{p <- plot.fun(data, ...)}}

\item{...}{other parameters to \code{plot.fun}}

\item{x}{A numeric vector or unit object specifying x-location.}

\item{y}{A numeric vector or unit object specifying y-location.}

\item{width}{A numeric vector or unit object specifying width.}

\item{height}{A numeric vector or unit object specifying height.}

\item{just}{A string or numeric
    vector specifying the justification of the viewport
    relative to its (x, y) location.  If there are two values, the first
    value specifies horizontal justification and the second value specifies
    vertical justification.  Possible string values are: \code{"left"},
    \code{"right"}, \code{"centre"}, \code{"center"}, \code{"bottom"},
    and \code{"top"}.  For numeric values, 0 means left alignment
    and 1 means right alignment.
  }
}
\description{
geom_annotation
}
\examples{
## prepare data
library(gg.layers)
library(ggplot2)
library(rcolors)

data("d_trendPerc")
d_mask <- mutate(d_trendPerc, mask = perc <= 0.99) \%>\% as_tibble()
n <- nrow(d_mask) * 2
dat <- rbind(cbind(type = "a", d_mask), cbind(type = "b", d_mask)) \%>\%
  mutate(val = rnorm(n))

brks <- seq(0.9, 1, 0.025)
nbrk <- length(brks) - 1
cols <- get_color(rcolors$amwg256, nbrk)

## option1
# the part of not significant
ggplot(data = dat, aes(x, y)) +
  geom_raster(aes(fill = perc)) +
  layer_barchart(aes(z = val),
    width = unit(0.3, "npc"),
    height = unit(0.3, "npc"),
    brks = brks, cols = cols
  ) +
  facet_wrap(~type)

## option2
func <- function(data, ...) {
  add_barchart(data$z, brks, cols, ...)
}

ggplot(data = dat, aes(x, y)) +
  geom_raster(aes(fill = perc)) +
  geom_annotation_func(aes(z = val), plot.fun = func) +
  facet_wrap(~type)
}
